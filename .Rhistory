<<<<<<< Updated upstream
# Scatterplots
# Define the predictors and response variable
predictors <- c("Trailer_Likes", "Trailer_Views", "Vote_Count", "Budget", "Runtime", "Avg_Vote")
scatter_plots <- lapply(predictors, function(var) {
ggplot(movie, aes(x = get(var), y = movie$Revenue)) +
geom_point() +
labs(title = paste("Scatter plot of", var, "vs. Revenue"))
})
knitr::opts_chunk$set(echo = TRUE)
movies = read.csv("C:\\Anand\\Projects_GWU\\DATS6101-P2-Movie-Revenue-Prediction\\movies.csv\\Movie_data.csv")
movies = read.csv("Movie_data.csv")
#head(movies)
summary(movies)
movie = movies # Creating a copy of data frame
library(dplyr)
remove_col <- c(1,5,7,13,16,17,18,19,20)
movie <- movie[, -remove_col]
head(movie)
library(ggplot2)
# Calculate the percentage of missing values in each column
column_na_percentages <- colSums(is.na(movie)) / nrow(movie) * 100
# Set a smaller font size
smaller_font_size <- 0.8
# Create a bar plot for the percentage of missing values in each column
barplot(column_na_percentages, main = "Percentage of Missing Values in Each Column",
xlab = "Columns", ylab = "Percentage of Missing Values",
col = "lightcoral", border = "black", ylim = c(0, 100),
names.arg = names(column_na_percentages), las = 2, cex.names = smaller_font_size)
print("Rows in Dataset before dropping rows with NA Values")
print(nrow(movie))
movie <- movie[complete.cases(movie), ]
print("Rows in Dataset After dropping rows with NA Values")
print(nrow(movie))
print("Rows in Dataset before cleaning")
print(nrow(movie))
# 1. Remove rows with Budget less than or equal to 0
movie <- movie[movie$Budget > 0, ]
# 2. Remove rows with Revenue less than or equal to 0
movie <- movie[movie$Revenue > 0, ]
# 3. Remove rows with Runtime less than or equal to 0
movie <- movie[movie$Runtime > 0, ]
print("Rows in Dataset After cleaning")
print(nrow(movie))
selected_columns <- c("Popularity", "Budget", "Revenue", "Runtime", "Avg_Vote", "Vote_Count", "Trailer_Views","Trailer_Likes")
box_plots_list <- list()
# Create box plots for each selected column
for (col in selected_columns) {
box_plot <- ggplot(movie, aes(y = get(col))) +
geom_boxplot(fill = "lightblue", color = "black", alpha = 0.7) +
labs(title = paste("Box Plot for", col), y = col) +
theme_minimal() +
theme(plot.title = element_text(size = 15)) +
theme(axis.title = element_text(size = 12)) +
theme(axis.text = element_text(size = 10))
box_plots_list[[col]] <- box_plot
}
for (col in selected_columns) {
print(box_plots_list[[col]])
}
library(dplyr)
remove_col <- c(1,5,7,13,16,17,18,19,20)
movie <- movie[, -remove_col]
head(movie)
movies = read.csv("Movie_data.csv")
movies = read.csv("movies.csv/Movie_data.csv")
#head(movies)
summary(movies)
movie = movies # Creating a copy of data frame
library(dplyr)
remove_col <- c(1,5,7,13,16,17,18,19,20)
movie <- movie[, -remove_col]
head(movie)
library(dplyr)
remove_col <- c(1,5,7,13,16,17,18,19,20)
movie <- movie[, -remove_col]
head(movie)
new_column_names <- c("Title", "Genre", "Language", "Popularity", "Release_Date","Budget","Revenue","Runtime","Status","Avg_Vote","Vote_Count","Trailer_Views","Trailer_Likes")
colnames(movie) <- new_column_names
new_column_names <- c("Title", "Genre", "Language", "Popularity", "Release_Date","Budget","Revenue","Runtime","Status","Avg_Vote","Vote_Count","Trailer_Views","Trailer_Likes")
colnames(movie) <- new_column_names
library(dplyr)
remove_col <- c(1,5,7,13,16,17,18,19,20)
movie <- movie[, -remove_col]
head(movie)
library(dplyr)
remove_col <- c(1,5,7,13,16,17,18,19,20)
movie <- movie[, -remove_col]
head(movie)
library(dplyr)
remove_col <- c(1,5,7,13,16,17,18,19,20)
movie <- movie[, -remove_col]
head(movie)
library(dplyr)
remove_col <- c(1,5,7,13,16,17,18,19,20)
movie <- movie[, -remove_col]
head(movie)
library(dplyr)
remove_col <- c(1,5,7,13,16,17,18,19,20)
movie <- movie[, -remove_col]
head(movie)
library(dplyr)
remove_col <- c(1,5,7,13,16,17,18,19,20)
movie <- movie[, -remove_col]
library(dplyr)
remove_col <- c(1,5,7,13,16,17,18,19,20)
movie <- movie[, -remove_col]
library(dplyr)
remove_col <- c(1,5,7,13,16,17,18,19,20)
movie <- movie[, -remove_col]
library(dplyr)
remove_col <- c(1,5,7,13,16,17,18,19,20)
movie <- movie[, -remove_col]
library(dplyr)
remove_col <- c(1,5,7,13,16,17,18,19,20)
movie <- movie[, -remove_col]
library(dplyr)
remove_col <- c(1,5,7,13,16,17,18,19,20)
movie <- movie[, -remove_col]
library(dplyr)
remove_col <- c(1,5,7,13,16,17,18,19,20)
movie <- movie[, -remove_col]
library(dplyr)
remove_col <- c(1,5,7,13,16,17,18,19,20)
movie <- movie[, -remove_col]
library(dplyr)
remove_col <- c(1,5,7,13,16,17,18,19,20)
movie <- movie[, -remove_col]
library(dplyr)
remove_col <- c(1,5,7,13,16,17,18,19,20)
movie <- movie[, -remove_col]
library(dplyr)
remove_col <- c(1,5,7,13,16,17,18,19,20)
movie <- movie[, -remove_col]
library(dplyr)
remove_col <- c(1,5,7,13,16,17,18,19,20)
movie <- movie[, -remove_col]
library(dplyr)
remove_col <- c(1,5,7,13,16,17,18,19,20)
movie <- movie[, -remove_col]
=======
knitr::opts_chunk$set(echo = TRUE)
movies = read.csv("C:\\Anand\\Projects_GWU\\DATS6101-P2-Movie-Revenue-Prediction\\movies.csv\\Movie_data.csv")
>>>>>>> Stashed changes
movies = read.csv("movies.csv/Movie_data.csv")
#head(movies)
summary(movies)
movie = movies # Creating a copy of data frame
library(dplyr)
remove_col <- c(1,5,7,13,16,17,18,19,20)
movie <- movie[, -remove_col]
head(movie)
new_column_names <- c("Title", "Genre", "Language", "Popularity", "Release_Date","Budget","Revenue","Runtime","Status","Avg_Vote","Vote_Count","Trailer_Views","Trailer_Likes")
colnames(movie) <- new_column_names
summary(movie)
library(ggplot2)
# Calculate the percentage of missing values in each column
column_na_percentages <- colSums(is.na(movie)) / nrow(movie) * 100
# Set a smaller font size
smaller_font_size <- 0.8
# Create a bar plot for the percentage of missing values in each column
barplot(column_na_percentages, main = "Percentage of Missing Values in Each Column",
xlab = "Columns", ylab = "Percentage of Missing Values",
col = "lightcoral", border = "black", ylim = c(0, 100),
names.arg = names(column_na_percentages), las = 2, cex.names = smaller_font_size)
print("Rows in Dataset before dropping rows with NA Values")
print(nrow(movie))
movie <- movie[complete.cases(movie), ]
print("Rows in Dataset After dropping rows with NA Values")
print(nrow(movie))
<<<<<<< Updated upstream
=======
library(ggplot2)
# Calculate the percentage of missing values in each column
column_na_percentages <- colSums(is.na(movie)) / nrow(movie) * 100
# Set a smaller font size
smaller_font_size <- 0.8
# Create a bar plot for the percentage of missing values in each column
barplot(column_na_percentages, main = "Percentage of Missing Values in Each Column",
xlab = "Columns", ylab = "Percentage of Missing Values",
col = "lightcoral", border = "black", ylim = c(0, 10),
names.arg = names(column_na_percentages), las = 2, cex.names = smaller_font_size)
print("Rows in Dataset before dropping rows with NA Values")
print(nrow(movie))
movie <- movie[complete.cases(movie), ]
print("Rows in Dataset After dropping rows with NA Values")
print(nrow(movie))
library(ggplot2)
# Calculate the percentage of missing values in each column
column_na_percentages <- colSums(is.na(movie)) / nrow(movie) * 100
# Set a smaller font size
smaller_font_size <- 0.8
# Create a bar plot for the percentage of missing values in each column
barplot(column_na_percentages, main = "Percentage of Missing Values in Each Column",
xlab = "Columns", ylab = "Percentage of Missing Values",
col = "lightcoral", border = "black", ylim = c(0, 2),
names.arg = names(column_na_percentages), las = 2, cex.names = smaller_font_size)
print("Rows in Dataset before dropping rows with NA Values")
print(nrow(movie))
movie <- movie[complete.cases(movie), ]
print("Rows in Dataset After dropping rows with NA Values")
print(nrow(movie))
library(ggplot2)
# Calculate the percentage of missing values in each column
column_na_percentages <- colSums(is.na(movie)) / nrow(movie) * 100
# Set a smaller font size
smaller_font_size <- 0.8
# Create a bar plot for the percentage of missing values in each column
barplot(column_na_percentages, main = "Percentage of Missing Values in Each Column",
xlab = "Columns", ylab = "Percentage of Missing Values",
col = "lightcoral", border = "black", ylim = c(0, 1000),
names.arg = names(column_na_percentages), las = 2, cex.names = smaller_font_size)
print("Rows in Dataset before dropping rows with NA Values")
print(nrow(movie))
movie <- movie[complete.cases(movie), ]
print("Rows in Dataset After dropping rows with NA Values")
print(nrow(movie))
library(ggplot2)
# Calculate the percentage of missing values in each column
column_na_percentages <- colSums(is.na(movie)) / nrow(movie) * 100
# Set a smaller font size
smaller_font_size <- 0.8
# Create a bar plot for the percentage of missing values in each column
barplot(column_na_percentages, main = "Percentage of Missing Values in Each Column",
xlab = "Columns", ylab = "Percentage of Missing Values",
col = "lightcoral", border = "black", ylim = c(0, 100),
names.arg = names(column_na_percentages), las = 2, cex.names = smaller_font_size)
print("Rows in Dataset before dropping rows with NA Values")
print(nrow(movie))
movie <- movie[complete.cases(movie), ]
print("Rows in Dataset After dropping rows with NA Values")
print(nrow(movie))
new_column_names <- c("Title", "Genre", "Language", "Popularity", "Release_Date","Budget","Revenue","Runtime","Status","Avg_Vote","Vote_Count","Trailer_Views","Trailer_Likes")
colnames(movie) <- new_column_names
summary(movie)
library(ggplot2)
# Calculate the percentage of missing values in each column
column_na_percentages <- colSums(is.na(movie)) / nrow(movie) * 100
# Set a smaller font size
smaller_font_size <- 0.8
# Create a bar plot for the percentage of missing values in each column
barplot(column_na_percentages, main = "Percentage of Missing Values in Each Column",
xlab = "Columns", ylab = "Percentage of Missing Values",
col = "lightcoral", border = "black", ylim = c(0, 100),
names.arg = names(column_na_percentages), las = 2, cex.names = smaller_font_size)
print("Rows in Dataset before dropping rows with NA Values")
print(nrow(movie))
movie <- movie[complete.cases(movie), ]
print("Rows in Dataset After dropping rows with NA Values")
print(nrow(movie))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
remove_col <- c(1,5,7,13,16,17,18,19,20)
movie <- movie[, -remove_col]
head(movie)
new_column_names <- c("Title", "Genre", "Language", "Popularity", "Release_Date","Budget","Revenue","Runtime","Status","Avg_Vote","Vote_Count","Trailer_Views","Trailer_Likes")
colnames(movie) <- new_column_names
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
movies = read.csv("movies.csv/Movie_data.csv")
#head(movies)
summary(movies)
movie = movies # Creating a copy of data frame
library(dplyr)
remove_col <- c(1,5,7,13,16,17,18,19,20)
movie <- movie[, -remove_col]
head(movie)
new_column_names <- c("Title", "Genre", "Language", "Popularity", "Release_Date","Budget","Revenue","Runtime","Status","Avg_Vote","Vote_Count","Trailer_Views","Trailer_Likes")
colnames(movie) <- new_column_names
summary(movie)
library(ggplot2)
# Calculate the percentage of missing values in each column
column_na_percentages <- colSums(is.na(movie)) / nrow(movie) * 100
# Set a smaller font size
smaller_font_size <- 0.8
# Create a bar plot for the percentage of missing values in each column
barplot(column_na_percentages, main = "Percentage of Missing Values in Each Column",
xlab = "Columns", ylab = "Percentage of Missing Values",
col = "lightcoral", border = "black", ylim = c(0, 100),
names.arg = names(column_na_percentages), las = 2, cex.names = smaller_font_size)
print("Rows in Dataset before dropping rows with NA Values")
print(nrow(movie))
movie <- movie[complete.cases(movie), ]
print("Rows in Dataset After dropping rows with NA Values")
print(nrow(movie))
library(ggplot2)
# Calculate the percentage of missing values in each column
column_na_percentages <- colSums(is.na(movie)) / nrow(movie) * 100
# Set a smaller font size
smaller_font_size <- 0.8
# Create a bar plot for the percentage of missing values in each column
barplot(column_na_percentages, main = "Percentage of Missing Values in Each Column",
xlab = "Columns", ylab = "Percentage of Missing Values",
col = "lightcoral", border = "black", ylim = c(0, 10),
names.arg = names(column_na_percentages), las = 2, cex.names = smaller_font_size)
print("Rows in Dataset before dropping rows with NA Values")
print(nrow(movie))
movie <- movie[complete.cases(movie), ]
print("Rows in Dataset After dropping rows with NA Values")
print(nrow(movie))
>>>>>>> Stashed changes
print("Rows in Dataset before cleaning")
print(nrow(movie))
# 1. Remove rows with Budget less than or equal to 0
movie <- movie[movie$Budget > 0, ]
# 2. Remove rows with Revenue less than or equal to 0
movie <- movie[movie$Revenue > 0, ]
# 3. Remove rows with Runtime less than or equal to 0
movie <- movie[movie$Runtime > 0, ]
print("Rows in Dataset After cleaning")
print(nrow(movie))
selected_columns <- c("Popularity", "Budget", "Revenue", "Runtime", "Avg_Vote", "Vote_Count", "Trailer_Views","Trailer_Likes")
box_plots_list <- list()
# Create box plots for each selected column
for (col in selected_columns) {
box_plot <- ggplot(movie, aes(y = get(col))) +
geom_boxplot(fill = "lightblue", color = "black", alpha = 0.7) +
labs(title = paste("Box Plot for", col), y = col) +
theme_minimal() +
theme(plot.title = element_text(size = 15)) +
theme(axis.title = element_text(size = 12)) +
theme(axis.text = element_text(size = 10))
box_plots_list[[col]] <- box_plot
}
for (col in selected_columns) {
print(box_plots_list[[col]])
}
# Scatterplots
# Define the predictors and response variable
predictors <- c("Trailer_Likes", "Trailer_Views", "Vote_Count", "Budget", "Runtime", "Avg_Vote")
scatter_plots <- lapply(predictors, function(var) {
ggplot(movie, aes(x = get(var), y = movie$Revenue)) +
geom_point() +
labs(title = paste("Scatter plot of", var, "vs. Revenue"))
})
# Display scatter plots
scatter_plots
<<<<<<< Updated upstream
predictors <- c("Trailer_Likes", "Trailer_Views", "Vote_Count", "Budget", "Runtime", "Avg_Vote")
scatter_plots <- lapply(predictors, function(var) {
ggplot(movie, aes(x = get(var), y = movie$Popularity)) +
geom_point() +
labs(title = paste("Scatter plot of", var, "vs.", Popularity))
})
predictors <- c("Trailer_Likes", "Trailer_Views", "Vote_Count", "Budget", "Runtime", "Avg_Vote")
scatter_plots <- lapply(predictors, function(var) {
ggplot(movie, aes(x = get(var), y = movie$Popularity)) +
geom_point() +
labs(title = paste("Scatter plot of", var, "vs.", Popularity))
})
predictors <- c("Trailer_Likes", "Trailer_Views", "Vote_Count", "Budget", "Runtime", "Avg_Vote")
scatter_plots <- lapply(predictors, function(var) {
ggplot(movie, aes(x = get(var), y = movie$Popularity)) +
geom_point() +
labs(title = paste("Scatter plot of", var, "vs. Popularity"))
})
# Display scatter plots
scatter_plots
predictors <- c("Trailer_Likes", "Trailer_Views", "Vote_Count", "Budget", "Runtime", "Avg_Vote")
scatter_plots <- lapply(predictors, function(var) {
ggplot(movie, aes(x = get(var), y = movie$Popularity)) +
geom_point() +
labs(title = paste("Scatter plot of", var, "vs. Popularity")),
# Scatterplots
# Define the predictors and response variable
predictors <- c("Trailer_Likes", "Trailer_Views", "Vote_Count", "Budget", "Runtime", "Avg_Vote")
scatter_plots <- lapply(predictors, function(var) {
ggplot(movie, aes(x = get(var), y = movie$Popularity)) +
=======
**Scatterplot for Revenue**
predictors <- c("Trailer_Likes", "Trailer_Views", "Vote_Count", "Budget", "Runtime", "Avg_Vote")
scatter_plots <- lapply(predictors, function(var) {
ggplot(movie, aes(x = get(var), y = Revenue, color = Revenue)) +
geom_point() +
labs(title = paste("Scatter plot of", var, "vs. Revenue"),
x = var,
y = "Revenue",
color = "Revenue")
})
scatter_plots
predictors <- c("Trailer_Likes", "Trailer_Views", "Budget", "Avg_Vote")
scatter_plots <- lapply(predictors, function(var) {
ggplot(movie, aes(x = get(var), y = Revenue, color = Revenue)) +
geom_point() +
labs(title = paste("Scatter plot of", var, "vs. Revenue"),
x = var,
y = "Revenue",
color = "Revenue")
})
scatter_plots
predictors <- c("Trailer_Likes", "Trailer_Views", "Budget", "Avg_Vote","Vote_Count","Runtime")
scatter_plots <- lapply(predictors, function(var) {
ggplot(movie, aes(x = get(var), y = Revenue, color = Revenue)) +
geom_point() +
labs(title = paste("Scatter plot of", var, "vs. Revenue"),
x = var,
y = "Revenue",
color = "Revenue")
})
scatter_plots
predictors <- c("Trailer_Likes", "Trailer_Views", "Vote_Count", "Budget", "Runtime", "Avg_Vote")
scatter_plots<- lapply(predictors, function(var) {
ggplot(movie, aes(x = get(var), y = Popularity, color = Popularity)) +
>>>>>>> Stashed changes
geom_point() +
labs(
title = paste("Scatter plot of", var, "vs. Popularity"),
x = var,
<<<<<<< Updated upstream
y = "Popularity"
)
})
# Display scatter plots
scatter_plots
=======
y = "Popularity",
color = "Popularity"
)
})
scatter_plots
numeric_cols <- sapply(movie, is.numeric)
cor_matrix <- cor(movie[, numeric_cols])
cor_matrix
library(corrplot)
corrplot(cor_matrix, method = "color")
library(GGally)
numeric_vars_subset <- c("Revenue", "Budget", "Popularity", "Runtime")
ggpairs(movie[, numeric_vars_subset])
cor_with_revenue <- sapply(movie[, numeric_cols], function(x) cor(x, movie$Revenue))
cor_with_revenue
barplot(cor_with_revenue, names.arg = names(cor_with_revenue), col = "skyblue", main = "Correlation with Revenue")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
movies = read.csv("movies.csv/Movie_data.csv")
#head(movies)
summary(movies)
movie = movies # Creating a copy of data frame
library(dplyr)
remove_col <- c(1,5,7,13,16,17,18,19,20)
movie <- movie[, -remove_col]
head(movie)
new_column_names <- c("Title", "Genre", "Language", "Popularity", "Release_Date","Budget","Revenue","Runtime","Status","Avg_Vote","Vote_Count","Trailer_Views","Trailer_Likes")
colnames(movie) <- new_column_names
summary(movie)
library(ggplot2)
# Calculate the percentage of missing values in each column
column_na_percentages <- colSums(is.na(movie)) / nrow(movie) * 100
# Set a smaller font size
smaller_font_size <- 0.8
# Create a bar plot for the percentage of missing values in each column
barplot(column_na_percentages, main = "Percentage of Missing Values in Each Column",
xlab = "Columns", ylab = "Percentage of Missing Values",
col = "lightcoral", border = "black", ylim = c(0, 10),
names.arg = names(column_na_percentages), las = 2, cex.names = smaller_font_size)
print("Rows in Dataset before dropping rows with NA Values")
print(nrow(movie))
movie <- movie[complete.cases(movie), ]
print("Rows in Dataset After dropping rows with NA Values")
print(nrow(movie))
print("Rows in Dataset before cleaning")
print(nrow(movie))
# 1. Remove rows with Budget less than or equal to 0
movie <- movie[movie$Budget > 0, ]
# 2. Remove rows with Revenue less than or equal to 0
movie <- movie[movie$Revenue > 0, ]
# 3. Remove rows with Runtime less than or equal to 0
movie <- movie[movie$Runtime > 0, ]
print("Rows in Dataset After cleaning")
print(nrow(movie))
selected_columns <- c("Popularity", "Budget", "Revenue", "Runtime", "Avg_Vote", "Vote_Count", "Trailer_Views","Trailer_Likes")
box_plots_list <- list()
# Create box plots for each selected column
for (col in selected_columns) {
box_plot <- ggplot(movie, aes(y = get(col))) +
geom_boxplot(fill = "lightblue", color = "black", alpha = 0.7) +
labs(title = paste("Box Plot for", col), y = col) +
theme_minimal() +
theme(plot.title = element_text(size = 15)) +
theme(axis.title = element_text(size = 12)) +
theme(axis.text = element_text(size = 10))
box_plots_list[[col]] <- box_plot
}
for (col in selected_columns) {
print(box_plots_list[[col]])
}
predictors <- c("Trailer_Likes", "Trailer_Views", "Budget", "Avg_Vote","Vote_Count","Runtime")
scatter_plots <- lapply(predictors, function(var) {
ggplot(movie, aes(x = get(var), y = Revenue, color = Revenue)) +
geom_point() +
labs(title = paste("Scatter plot of", var, "vs. Revenue"),
x = var,
y = "Revenue",
color = "Revenue")
})
scatter_plots
predictors <- c("Trailer_Likes", "Trailer_Views", "Budget", "Avg_Vote","Vote_Count","Runtime")
scatter_plots <- lapply(predictors, function(var) {
ggplot(movie, aes(x = get(var), y = Revenue, color = Revenue)) +
geom_point() +
labs(title = paste("Scatter plot of", var, "vs. Revenue"),
x = var,
y = "Revenue",
color = "Revenue")
})
scatter_plots
predictors <- c("Trailer_Likes", "Trailer_Views", "Vote_Count", "Budget", "Runtime", "Avg_Vote")
scatter_plots<- lapply(predictors, function(var) {
ggplot(movie, aes(x = get(var), y = Popularity, color = Popularity)) +
geom_point() +
labs(
title = paste("Scatter plot of", var, "vs. Popularity"),
x = var,
y = "Popularity",
color = "Popularity"
)
})
scatter_plots
numeric_cols <- sapply(movie, is.numeric)
cor_matrix <- cor(movie[, numeric_cols])
cor_matrix
library(corrplot)
corrplot(cor_matrix, method = "color")
library(GGally)
numeric_vars_subset <- c("Revenue", "Budget", "Popularity", "Runtime")
ggpairs(movie[, numeric_vars_subset])
cor_with_revenue <- sapply(movie[, numeric_cols], function(x) cor(x, movie$Revenue))
cor_with_revenue
barplot(cor_with_revenue, names.arg = names(cor_with_revenue), col = "skyblue", main = "Correlation with Revenue")
>>>>>>> Stashed changes
